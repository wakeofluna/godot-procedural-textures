[gd_resource type="Shader" script_class="ProceduralShader" load_steps=2 format=3 uid="uid://clhdv6174a7kl"]

[ext_resource type="Script" path="res://addons/procedural_textures/procedural_shader.gd" id="1_kxbrv"]

[resource]
code = "shader_type canvas_item;

// samplers
uniform sampler2D input;
uniform sampler2D mask;
// uniforms
uniform int angle : hint_range(0, 360) = 45;
uniform float strength : hint_range(0.0, 32.0) = 4.0;

#include \"helper_functions.gdshaderinc\"

// helper struct to pack uniforms
struct EmbossDef
{
	vec2 uv_angle_offset;
	float strength;
};

// definition function; must have all arguments in same order as uniforms
EmbossDef make_emboss_def(int p_angle, float p_strength) {
	return EmbossDef(
		degrees_to_phi(p_angle) * uv_per_pixel, p_strength
	);
}

// process function; takes the def struct and the current UV
vec4 process_emboss(EmbossDef def, vec2 uv) {
	vec4 color_in = texture(input, uv);
	float val_mask_1 = texture(mask, uv).x;
	float val_mask_2 = texture(mask, uv + def.uv_angle_offset).x;
	float v = (val_mask_2 - val_mask_1) * def.strength;
	return clamp(color_in + vec4(v, v, v, 0), 0.0, 1.0);
}

// fragment function; for single applications
void fragment() {
	EmbossDef def = make_emboss_def(angle, strength);
	COLOR = process_emboss(def, UV);
}
"
script = ExtResource("1_kxbrv")
name = "Emboss"
